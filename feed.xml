<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Turhan Coskun</title>
    <description>Ruby, JavaScript, Clojure ve diğer yazılım maceralarım
</description>
    <link>http://turhancoskun.com/</link>
    <atom:link href="http://turhancoskun.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 19 Jan 2015 22:24:19 +0200</pubDate>
    <lastBuildDate>Mon, 19 Jan 2015 22:24:19 +0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>JavaScript ile Lambda Calculus</title>
        <description>&lt;p&gt;Genelde blog yazılarımı yeni başlayanlara uygun olarak yazarım. Bu sefer bir değişiklik yapıp biraz bilgisayar bilimlerinin temellerine inmek ve bunu da JavaScript ile yapmak istiyorum. Daha önce Ruby ve Clojure ile Lambda Calculus implementasyonu yaptım ama JavaScript ile daha zevkli olacaktır.&lt;/p&gt;

&lt;p&gt;JavaScript ile fonksiyonel programlamanın nimetlerinden faydalanabiliriz. Özellikle &lt;em&gt;high-order&lt;/em&gt; fonksiyonları ve &lt;em&gt;closure&lt;/em&gt;‘lar ile fonksiyonel programlama konseptlerine uyumluluğu, deney yapmak için güzel bir araç haline getiriyor.&lt;/p&gt;

&lt;p&gt;Yazının bitiminde Lambda Calculus ile basit bir özyinelemeli(recursive) faktoriyel yazmış olacağız. Yazacak olduğumuz vanilya JavaScript faktoriyel kodu aşağıdaki gibidir:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;faktoriyel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;faktoriyel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi gelelim asıl konumuza:&lt;/p&gt;

&lt;h2 id=&quot;lambda-calculus-nedir&quot;&gt;Lambda Calculus Nedir?&lt;/h2&gt;

&lt;p&gt;Lambda(λ), Yunan alfabesindeki onbirinci harfe takabül eden ve özellikle üniversitede sayısal bölüm okumuş olanların sıkça haşır neşir olduğu bir semboldür. Lambda sembolünün özel bir anlamı olmamakla birlikte genellikle matematik dünyasında fonksiyonlara değer atamayı belirten bir semboldür. &lt;em&gt;Calculus&lt;/em&gt;, latince hesap yapmak anlamına gelir, İngilizce &lt;em&gt;calculate&lt;/em&gt; kelimesi de Latince calculus’ten alınmıştır. Matematikte ise calculus, fonksiyonlar, diziler, limit, türev ve integrali kapsayan matematiksel analitiğin giriş kısmını tanımlamak için kullanılır.&lt;/p&gt;

&lt;p&gt;Kelimelerin kökenlerini inceledikten sonra artık Lambda Calculus’un daha kolay anlaşılacağını umuyorum. Lambda Calculus, ile kez Alonzo Church tarafından, matematiğin temellerini araştırırken 1930larda ortaya sunulmuş. Tarih konusunda çok detaylara girmek istemiyorum ama &lt;a href=&quot;http://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;Vikipedi&lt;/a&gt; sayfasında dediğine göre, bilgisayar bilimlerinden başka; felsefe, dil ve matemetik alanlarında da kullanımı varmış.&lt;/p&gt;

&lt;p&gt;Lambda Calculus ile tek veri tipi aslında fonksiyonlardır. Sadece fonksiyon kullanarak değişken tanımı, &lt;em&gt;if&lt;/em&gt; koşulları ve hesaplama yapacağız. Bir nevi JavaScript içinde ayrı bir fonksiyonel programlama dili çıkarmış olacağız.&lt;/p&gt;

&lt;h3 id=&quot;lambda-fadeleri&quot;&gt;Lambda İfadeleri&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;λx.x&lt;/strong&gt; bu ifade basit bir lambda ifadesi olup JavaScript versiyonu basitçe aşağıdaki gibidir. λ işaretinden sonra gelen &lt;em&gt;x&lt;/em&gt;, parametre ve ardından gelen &lt;em&gt;x&lt;/em&gt; ise dönüş değeri olarak düşünülebilir.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Biraz daha karmaşığa doğru ilerlersek, JavaScript’te bulunan &lt;em&gt;closure&lt;/em&gt; ve &lt;em&gt;scope&lt;/em&gt; kavramlarını hatırlayalım. JavaScript’e çevireceğimiz lambda ifadesi &lt;strong&gt;λx.λ.y.x&lt;/strong&gt; şeklinde. λ işaretinden sonra gelen &lt;em&gt;x&lt;/em&gt;, parametredir ve ardından gelen başka bir lambda ifadesi ise fonksiyonun başka bir fonksiyon döndüreceğini gösteriyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;λx.λ.x.y&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;anonim-fonksiyonlarla-lemler&quot;&gt;Anonim Fonksiyonlarla İşlemler&lt;/h3&gt;

&lt;p&gt;Şimdi basit bir çarpma işlemi yapan fonksiyon yazalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi değişken tanımlamadık ama ananim fonksiyonumuz iki parametre alıyor. Lambda Calculus’te sadece 1 parametre alabilir. Bu durumda kodu aşağıdaki gibi refaktor edebiliriz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;faktoriyel-kodundaki-fonksiyon-olmayan-ksmlar&quot;&gt;Faktoriyel Kodundaki Fonksiyon olmayan kısımlar&lt;/h2&gt;

&lt;p&gt;Lambda calculus’teki amacımız hesaplama işlemini sadece fonksiyon kullanarak tamamlamak, ancak basit bir recursive işleminde bile birden fazla fonksiyon olmayan öğe mevcut. Sonuca ulaşmak bunların hepsini fonksiyonlarla ifade etmemiz gerekecek.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sayılar &lt;code&gt;n, 1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Boolean değerler true, false&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n - 1&lt;/code&gt; çıkarma işlemi&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;===&lt;/code&gt; eşittir ifadesi&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;if&lt;/code&gt; ifadesi&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n *&lt;/code&gt; çarpma işlemi&lt;/li&gt;
  &lt;li&gt;Yineleme için Y-Combinator &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;saylar&quot;&gt;Sayılar&lt;/h3&gt;

&lt;p&gt;Lambda calculus tanımı yaparken tek veri tipinin fonksiyon olduğunu belirtmiştim. Bu durumda yukarıda verdiğim örneklerde 2 ve 3 &lt;code&gt;number&lt;/code&gt; tipini kullandık. Ben anlaşılması basit olması açısından tam sayılar yerine sıfırdan beşe doğal sayıları kullanacağım.&lt;/p&gt;

&lt;p&gt;Not: Fonksiyonel programlamanın temellerinden birisi de &lt;em&gt;immutability&lt;/em&gt; (değişmezlik) olduğu için sayı tanımları yaparken ES6 standardı olan &lt;code&gt;const&lt;/code&gt; deyimini kullanacağım. &lt;em&gt;const&lt;/em&gt; deyimi bazı ortamlarda desteklenmiyor olabilir ancak bu yazıyı yazarken kullandığım Chrome sürümü tarafından destekleniyor. Eğer &lt;code&gt;const&lt;/code&gt; ifadesini desteklemeyen bir ortamda deneme yaparsanız const yerine &lt;code&gt;var&lt;/code&gt; kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bir problemimiz daha var: Şu an için JavaScript, sadece fonksiyon ile nasıl aritmetik işlem yapacağını bilmiyor ve bunu bizim öğretmemiz gerek.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki fonksiyonu Lambda Calculus’te oluşturduğumuz saf fonksiyon değerlerini bildiğimiz ‘number’ tipine çevirmek için kullanacağız.&lt;/p&gt;

&lt;p&gt;Şimdi fonksiyonel programlamanın nimetlerinden faydalanarak &lt;em&gt;rakamsız&lt;/em&gt; sayılarımızı oluşturalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sifir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde sayılarımızı tamamladık. Konsol üzerinde test etmek isterseniz:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sifir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;sayi&lt;/code&gt; fonksiyonumuz işini iyi yapıyor ve yinemeli şekilde x+1 işlemi gerçekleştirerek istediğimiz fonksiyonları doğal sayıya çeviriyor. Sayıları tanımladığımız fonksiyonlara bakarsanız saf fonksiyonlardan meydana geldiklerini görürsünüz.&lt;/p&gt;

&lt;h3 id=&quot;boolean-deerler&quot;&gt;Boolean Değerler&lt;/h3&gt;

&lt;p&gt;JavaScript ile Lambda Calculus için sayıların nasıl implemente edildiklerini gördük. Mantığı biraz anladıysak fonksiyon kullanarak nasıl true, false değerlerinin elde edilebileceğini bulabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;λx.λy.&lt;/strong&gt; ifadesi x döndürürse &lt;code&gt;true&lt;/code&gt;, y döndürürse &lt;code&gt;false&lt;/code&gt; kabul edeceğiz. Ancak fonksiyon boolen değerini, JavaScript boolean değerine çevirmek için ayrı bir fonksiyona ihtiyacımız var.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt; fonksiyonunu(arayüz de desek olur sanıyorum) yine iç içe geçmiş fonksiyonları parametre olarak alacak şekilde yazdık.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dogru&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yanlis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-ifadesi&quot;&gt;If Ifadesi&lt;/h3&gt;
&lt;p&gt;Clojure ve diğer Lisp lehçelerinde if dahil tüm ifadeler için sürekli fonksiyon notasyonunu kullanmak &lt;code&gt;(if true (...) (...) )&lt;/code&gt; oldukça pratik ve okunaklı bir yöntem. Şimdi aynı gücü JavaScript ile elde etme zamanı.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Normal bir if’in yapması gerektiği gibi bool türünde bir parametre alacak ve bool değeri &lt;em&gt;dogru&lt;/em&gt; veya &lt;em&gt;yanlis&lt;/em&gt; olması durumuna göre iç içe geçmiş fonksiyonlarımızdan hangisinin önce çalışacağına karar verecek.&lt;/p&gt;

&lt;p&gt;Konsol üzerinde test etmek için:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yanlis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dogru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;karma-lemi&quot;&gt;Çıkarma İşlemi&lt;/h3&gt;
&lt;p&gt;Çıkarma işleminin bizim için ekstra önemli bir özelliği var o da eşittir işleminin temelini oluşturacak olması. Şöyle ki bir sayıdan bir sayı çıkarıldığında sonuç 0 ise o iki sayı birbirine eşittir. Bu bilgiyi aklımızda tutalım, daha sonra işimize yarayacak.&lt;/p&gt;

&lt;p&gt;Lambda calculus ile basit aritmetik işlemleri gerçekleştirmek iki taban fonksiyon bulunuyor. Birisi arttırıcı diğeri ise azaltıcı. Toplama, çıkarma, çarpma ve bölme gibi işlemler bu temel fonksiyon üzerinden yürüyor.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arttir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;azalt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Arttırma ve azaltma için taban fonksiyonlarımız tamam, şimdi sıra çıkarma işleminde.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cikar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;azalt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi cikar fonksiyonu ile daha okunaklı bir hale geldi.&lt;/p&gt;

&lt;h3 id=&quot;arpma-lemi&quot;&gt;Çarpma İşlemi&lt;/h3&gt;

&lt;p&gt;Çarpma işlemini gerçekleştirmek için daha önce tanımladığımız &lt;code&gt;arttir&lt;/code&gt; taban fonksiyonundan toplama fonksiyonunu ve toplama fonksiyonundan ise çarpma fonksiyonunu gerçekleştireceğiz. Unutulmamalı ki çarpma işlemi yinelemeli bir toplama işlemidir. Örneğin n + n + n &amp;lt;=&amp;gt; 3n.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;topla&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arttir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;carp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;topla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sifir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//dort&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;eittir-fonksiyonu&quot;&gt;Eşittir Fonksiyonu&lt;/h3&gt;
&lt;p&gt;Eşittir fonksiyonu iki parametre alacak ve bu parametrelerle bir çıkarma işlemi gerçekleştirecek. Sonuc sifir olursa dogru, aksi halde yanlis sonucunu dondurecek. Sonucun sıfır olup olmadığını kontrol etmek bir fonksiyona daha ihtiyacımız olacak.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sifirMi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yanlis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dogru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Son olarak eşittir için fonksiyonumuz:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;esittir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sifirMi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cikar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;yineleme-iin-y-combinator&quot;&gt;Yineleme için Y-Combinator&lt;/h2&gt;

&lt;p&gt;Y-Combinator deyince eminim hemen aklımıza ünlü startup destek şirketi veya Hacker News gelebilir ama burada bahsedeceğimiz Y-Combinator o değil. Aksine Lambda Calculus ile &lt;em&gt;recursion&lt;/em&gt;(özyineleme) işlemlerini gerçekleştirmek için kullanılan önemli bir yardımcı fonksiyon.&lt;/p&gt;

&lt;p&gt;Y-Combinator: Lambda Calculus ifadesi: &lt;strong&gt;λf.(λx.f (x x)) (λx.f (x x))&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yCombinator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burada dikkat ederseniz yCombinator içinde hiçbir yerde fonksiyonun kendisine referans vermedik. Aksi halde sonsuz döngüye girerek programın akışını kilitleyebilirdi.&lt;/p&gt;

&lt;h2 id=&quot;yeni-faktoriyel-kodumuz&quot;&gt;Yeni Faktoriyel Kodumuz&lt;/h2&gt;

&lt;p&gt;Buraya kadar lambda calculus faktoriyel kodumuz için çok emek sarfettik. Artık ekmeğini yeme zamanımız geldi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yinemeli JavaScript kodunun yCombinator olarak çağırılması:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orjFaktoriyel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burada orijinal faktoriyel kodunu henüz lambda calculus formuna çevirmedik ancak yCombinator fonksiyonuna parametre olarak geçebileceğimiz bir forma soktuk. Yine burada dikkat etmeniz gereken faktoriyel fonksiyonun kendine referans vermeden yineleme işlemini deneyecek olmamız.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yCombinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orjFaktoriyel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;faktoriyel fonksiyonunu çağırmak için yCombinator’ü kullandık.&lt;/p&gt;

&lt;h3 id=&quot;javascriptin-kysna-vurmak&quot;&gt;JavaScript’in Kıyısına Vurmak&lt;/h3&gt;

&lt;p&gt;Şimdi bütün bu yaptıklarımızı bir araya getirerek faktoriyel kodumuzun son halini oluşturalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;faktoriyel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;esittir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sifir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;carp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factoriyel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cikar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Saf Lambda Calculus kodunu yCombinator ile çağırdığımızda.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yCombinator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;faktoriyel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iki&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;edit&quot;&gt;Edit:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;“RangeError: Maximum call stack size exceeded”&lt;/strong&gt; hatası alıyoruz :( Blog postun ilk taslağını hazırladığımda ve bu hatayı aldığımda aslında y-combinator ile ilgili kısımda bir implementasyon hatası yaptığımı düşünmüştüm. StackOverflow üzerinde sorduğum soruya yaklaşık 10 gün kimse cevap vermediğini görünce JavaScript deyince aklımıza gelen isim olan, sevgili &lt;a href=&quot;https://twitter.com/fkadev&quot;&gt;Fatih Kadir Akın&lt;/a&gt;‘a Twitter üzerinden ulaştım ve sağolsun kodu inceledi, implemantasyon hatası olmadığını söyledi ve post’u yine de yayınlamamı tavsiye etti. Hızlı feedback için kendisine yeniden teşekkür ediyor ve an azından Lambda Calculus kodunun nasıl olduğunu göstermiş olduğuma inanıyorum. Umarım JavaScript üzerinde &lt;code&gt;call stack&lt;/code&gt; limiti arttırılır ve bizde lambda calculus ile daha fazla deney yapabiliriz. &lt;/p&gt;

&lt;h2 id=&quot;kaynaklar&quot;&gt;Kaynaklar&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;http://safalra.com/lambda-calculus/&lt;/li&gt;
  &lt;li&gt;http://codon.com/programming-with-nothing&lt;/li&gt;
  &lt;li&gt;http://en.wikipedia.org/wiki/Lambda_calculus&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 19 Jan 2015 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/javascript-ile-lambda-calculus/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/javascript-ile-lambda-calculus/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>JavaScript ile String&#39;den &amp;lt;a&amp;gt; Etiketi Üretmek</title>
        <description>&lt;p&gt;JavaScript, string türünden nesneler için bir takım HTML yardımcıları içeriyor. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#HTML_wrapper_methods&quot;&gt;MDN&lt;/a&gt; referanslarında gördüğümüz gibi çoğu fonksiyonun süresi geçmek üzere olarak işaretlenmiş. Ancak nedense ES6 öneri taslağında halen mevcutlar. Link yardımcısının bu fonksiyonların en önemlisi olduğunu düşündüğün için link yardımcısı ile ilgili birkaç örnek göstermek istiyorum.&lt;/p&gt;

&lt;p&gt;Kullanılışı:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burada parametre olarak girilen url &lt;strong&gt;&lt;em&gt;&amp;lt;a href=””…&lt;/em&gt;&lt;/strong&gt; href kısmı ve string’in kendisi ise linkin yazı kısmı olacak. Daha iyi anlamak için örnek vermek gerekirse:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Google&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Döndüreceği Değer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Google&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Daha başka örnekler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://foobar.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;barLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &amp;lt;a href=&amp;quot;http://foobar.com&amp;quot;&amp;gt;Foo&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Veri kaynağından aşağıdaki json verisinin döndüğünü varsayarsak:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Turhan Coşkun&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;blog_url&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://turhancoskun.com&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/bloggers/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#elem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blog_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Kullanım alanına göre örnekler sayısız çoğaltılabilir. &lt;/p&gt;

&lt;p&gt;Görüşmek Üzere. :)&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Jan 2015 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/javascript-ile-stringden-a-etiketi-uretmek/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/javascript-ile-stringden-a-etiketi-uretmek/</guid>
        
        <category>İpucu</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>Git ile Panik Yönetimi</title>
        <description>&lt;p&gt;Uygulama geliştirirken bazen işler istediğimiz gibi gitmez ve bu durumda favori versiyon kontrol sistemine güveniriz. Yaptığımız değişiklikleri geri almamız ya da eski revizyonları kontrol etmemiz gerekebilir.&lt;/p&gt;

&lt;p&gt;Aklıma gelen muhtemel panik senaryoları ve kendimizi nasıl kurtarabileceğimize bakalım..&lt;/p&gt;

&lt;p&gt;Başlangıç olarak:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init
touch davet.md
git add davet.md
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;İlk commit&amp;quot;&lt;/span&gt;
git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şeklinde &lt;em&gt;commit&lt;/em&gt; tarihimizi başlatalım.&lt;/p&gt;

&lt;h2 id=&quot;yanl-dosyay-git-add-ile-ekledim-ne-yapmalym&quot;&gt;Yanlış dosyayı &lt;em&gt;git add&lt;/em&gt; ile ekledim ne yapmalıyım?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;git add&lt;/em&gt; komutu yerel repomuzdaki değişiklikleri, sıradaki &lt;em&gt;commit&lt;/em&gt;‘e eklemek üzere &lt;em&gt;staging&lt;/em&gt; dediğimiz indekse yüklemek için kullanılır.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch ceviz.md
git add .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ups. &lt;strong&gt;ceviz.md&lt;/strong&gt; dosyasını &lt;em&gt;staging&lt;/em&gt;‘e ekledik ama -eklememiz- gerekiyordu.&lt;/p&gt;

&lt;h3 id=&quot;panik-yok&quot;&gt;Panik Yok!&lt;/h3&gt;

&lt;p&gt;Çözümü çok basit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD ceviz.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;İşte bu kadar. Artık dosyamız &lt;em&gt;git status&lt;/em&gt; ile kontrol ettiğimizde orada olmayacak.&lt;/p&gt;

&lt;h2 id=&quot;en-son-commiti-nasl-geri-alrm&quot;&gt;En son commit’i nasıl geri alırım?&lt;/h2&gt;

&lt;p&gt;Aşağıdaki gibi &lt;em&gt;commit&lt;/em&gt; eklediğimizi varsayarsak?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ceviz Ekle&amp;quot;&lt;/span&gt;
git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ce17f4d Ceviz ekle
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aslında git ile &lt;em&gt;commit&lt;/em&gt; geri almanın zilyon tane yolu var. En basitlerinden bazılarını açıklayalım.&lt;/p&gt;

&lt;h3 id=&quot;git-revert&quot;&gt;git revert&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git revert HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bunu yaptığınız da editörünüz açılacak ve sizden bir commit mesajı girmenizi isteyecektir. Ve en son committe yaptığımız değişikleri geri alan yeni bir commit oluşturacaktır.&lt;/p&gt;

&lt;p&gt;Tabi ki bu yöntemin avantajları olduğu gibi dezavantajları da olacaktır. En önemli avantajı son derece güvenli olması yan etkilerinin kolaylıkla geri alınabilmesidir.&lt;/p&gt;

&lt;p&gt;Neler olduğuna şöyle bir göz atarsak:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;e5f4c85 Revert &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ceviz ekle&amp;quot;&lt;/span&gt;
ce17f4d Ceviz ekle
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Çıktıdan anladığımız kadarıyla &lt;em&gt;revert&lt;/em&gt; komutu, aslında gerçek anlamda geri alma işlemi yapmıyor, aksine bir commitin etkilerini geri alan yeni bir commit oluşturuyor.&lt;/p&gt;

&lt;p&gt;Burada dikkat etmemiz gereken can alıcı nokta; &lt;em&gt;git revert&lt;/em&gt; ile commit tarihi değişmedi ve aynen duruyor. Bu yaklaşım public olmuş branch’lar için başka kullanıcıların değişikliklerini yıkmamak adına ve proje tarihini takip edebilmek için oldukça mantıklı. Ancak lokal bir branch’ta çalışıyorsanız ve değişiklikleriniz henüz başkalarıyla paylaşılmamışsa aynı dosyalarla ilgili değişiklikleri içeren ekstra bir commit oldukça mantıksız olacaktır.&lt;/p&gt;

&lt;h3 id=&quot;git-reset&quot;&gt;git reset&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;git reset&lt;/em&gt;&lt;/strong&gt;, revert’e göre daha tehkileli bir yöntem. reset ile yaptığınız bazı işlemleri geri alamayabilirsiz. &lt;/p&gt;

&lt;p&gt;Şimdi senaryomuza geri dönelim ve lokal branchta çalışırken revert’in oluşturduğu ekstra committen duyduğumuz memnuniyetsizlikle son commit’i geri alalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ce17f4d Ceviz ekle
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi revert komutunun oluşturduğu commit ve etkileri gitti. HEAD~1 diyerek kafayı bir commit geri çekmiş olduk, &lt;strong&gt;&lt;em&gt;git reset HEAD~2&lt;/em&gt;&lt;/strong&gt; deseydik doğrudan İlk Commit’e gelmiş olurduk. &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt; ile kontrol edersek revert commitinin yaptığı değişikliğin staging’e eklenmemiş olduğunu görürüz. Bu durum aslında &lt;strong&gt;&lt;em&gt;git reset&lt;/em&gt;&lt;/strong&gt; komutunun default davranışı ile alakalı bir durum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;git reflog&lt;/em&gt;&lt;/strong&gt; komutu ile çıktıyı kontrol edin. Göreceksiniz ki &lt;em&gt;git&lt;/em&gt;, yaptığımız her hareketi kayıt almış. Çalışma dizinimizi HEAD@{n} şeklinde ifade edilen konumlara resetleyebiliriz. bunun için e5f4 ile başlayan git revert işlemini yaptığımız kısma dönelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;e5f4c85 Revert &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ceviz ekle&amp;quot;&lt;/span&gt;
ce17f4d Ceviz ekle
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi &lt;strong&gt;&lt;em&gt;git reset&lt;/em&gt;&lt;/strong&gt; kısmını farklı türlü denemek için &lt;em&gt;git reset HEAD~1&lt;/em&gt; yapmadan önceki konumumuza geri döndük. git reset komutunu farklı bir parametre ile deneyelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset --hard HEAD~1
git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ce17f4d Ceviz ekle
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ve &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt; komutunu daha önce verdiğimizde ceviz.md dosyasının silinmek üzere staging’de beklediğini görmüştük. Şimdi tekrar kontrol ettiğimizde staging temiz ve ceviz.md olması gerektiği gibi dizinimizde duruyor ama daha önce stagingdeki değişikler uçmuş. Peki ne değişti?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;git reset&lt;/em&gt;‘in farklı çalışma modları vardır ve bu modlardan ön tanımlı olan –mixed modunu ilk reset işleminde mod parametresi belirlemeyerek test etmiş olduk. Daha sonra ise –hard parametresini de ekleyerek tekrar denedik aradaki farkı anlamaya çalıştık. &lt;strong&gt;&lt;em&gt;git help reset&lt;/em&gt;&lt;/strong&gt; ile diğer modları kontrol ettiğimizde –mixed, –hard, –soft, –keep ve –merge olmak üzere 5 adet olduklarını görürüz. Bunlardan ilk üçünü daha sıklıkla kullanıldığı için açıklamaya çalışacağım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;–mixed, &lt;em&gt;git reset –mixed HEAD~1&lt;/em&gt; : git reset komutunun öntanımlı davranışıdır ve geri aldığımızda değişikler staging’e otomatik eklenmemiştir. git status komutu ile dosyaların eklenmek üzere olduklarını görürüz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–soft, &lt;em&gt;git reset –soft HEAD~1&lt;/em&gt; : –mixed moduna çok benzer aradaki fark, değişiklikleri git status ile kontrol ettiğimizde, staginge eklendiklerini ve commit etmek için beklediklerini görürüz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–hard, &lt;em&gt;git reset –hard HEAD~1&lt;/em&gt; : Bu modun denemesini beraber yapmıştık. Değişikler stagingde değil doğru kaybolmuş olurlar. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOT: Public olmuş branchlarda reset kullanmayın. Aksine revert kullanmayı tercih edin. &lt;/p&gt;

&lt;h2 id=&quot;eyvah-commit-mesajn-yanl-girdim&quot;&gt;Eyvah! commit mesajını yanlış girdim&lt;/h2&gt;

&lt;p&gt;Bu çok olur. Saçma bir imla hatası ya da anlam kayması her ne sebepten olursa olsun commit mesajını yenilemek gerekebilir.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit --amend&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bu sayede commit mesajlarını düzenlediğiniz editör açılır ve siz commit mesajının yeni halini tekrar yayınlarsınız.&lt;/p&gt;

&lt;p&gt;Tek satırda halledebilmek için -m parametresini eklemek.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit --amend -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ceviz eklendi&amp;quot;&lt;/span&gt;
git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;719c938 Ceviz eklendi
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz commit kodu değişmiş. Bu da demek oluyor ki commit tarihine müdahale etmişiz. Commit tarihini değiştiren bir komut olduğu için paylaşılan branchlarda &lt;em&gt;commit –amend&lt;/em&gt; kullanmayın.&lt;/p&gt;

&lt;h2 id=&quot;ben-bu-commite-baka-bir-dosya-daha-ekleyecektim&quot;&gt;Ben bu commit’e başka bir dosya daha ekleyecektim!&lt;/h2&gt;

&lt;p&gt;Panik yapmanın alemi yok. Olur böyle şeyler. :) –amend komutu en son commit’te değişiklikler yapmamızı sağlıyordu. Yine yardımcı olabilir.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch foo.md
touch bar.md
git add foo.md
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo ve bar ekle&amp;quot;&lt;/span&gt;
git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;İyi de foo ve bar ekledik ama sadece foo ekledik bar olduğu gibi duruyor.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add bar.md
git commit --amend --no-edit
git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Görüldüğü üzere &lt;em&gt;–no-edit&lt;/em&gt; ekleyerek commit mesajına dokunmadan eksik kalan dosyayı da ekleyerek son commit güncellendi.&lt;/p&gt;

&lt;h2 id=&quot;gerilerde-yle-bir-commit-var-resmen-yz-karas-derhal-kurtulmalym&quot;&gt;Gerilerde öyle bir commit var resmen yüz karası. Derhal kurtulmalıyım!&lt;/h2&gt;

&lt;p&gt;git ile tarihi baştan yazabileceğiniz çok önemli bir yardımcıya kavuşursunuz. O yardımcının adı &lt;em&gt;rebase&lt;/em&gt;. &lt;em&gt;–interactive&lt;/em&gt; veya kısaca &lt;em&gt;-i&lt;/em&gt; parametresi ekleyerek geçmişe gidebilir, commit birleştirebilir, bölebilir, silebilir hatta yer değiştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Diyelim ki foo ve bar’ın projede yeri olmadığına ve tamamen gitmeleri gerektiğine karar verdiniz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rebase -i HEAD~3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pick 719c938 Ceviz eklendi
pick e1317b5 foo ve bar ekle 
pick ba51761 Ceviz başlık eklendi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Açılan editöre bir takım ayarlar yapmalıyız. foo ve barı kaldıracağız ve ceviz dosyasını oluşturmak ve başlık eklemek için ayrı commitler olması da anlamsız. Şimdi düzenleyerek aşağıdaki hale getirelim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pick 719c938 Ceviz eklendi
squash ba51761 Ceviz başlık eklendi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit mesajının ne olacağını sorduğunda “Ceviz eklendi” olanı seçiyoruz yani diğerini # ile yorum satırı yapıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Açıkçası bayağı bir temizlik olmuş gibi :)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;549826e Ceviz eklendi
8d123a1 İlk commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat ceviz.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ekranda “ceviz” çıktısını aldıysak herşey istediğimiz gitmiş başlık eklediğimiz commit ceviz oluşturduğumuz commit ile birleşmiş demektir.&lt;/p&gt;

&lt;h2 id=&quot;ok-skntl-ilem-yaptm-gemie-dnmem-gerek&quot;&gt;Çok sıkıntılı işlem yaptım geçmişe dönmem gerek&lt;/h2&gt;
&lt;p&gt;Git, bizim için yaptığımız işlemlere referans kaydı tutuyor. Yukarıda revert komutunu geri alırken kullandığımız gibi. &lt;strong&gt;&lt;em&gt;git reflog&lt;/em&gt;&lt;/strong&gt; ile HEAD@{n} ‘i takiben yapılan işlemle de ilgili açıklamalar. Tarihten bu kesitlere istediğiniz gibi ışınlanabilirsiniz tek yapmanız gereken git reset HEAD@{n} ile istediğiniz noktaya gidebiliriz. &lt;/p&gt;

&lt;p&gt;Örneğin:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En temel panik yönetimi yöntemlerinden bahsetmiş olduk. Başka bir yazıda görüşmek üzere.&lt;/p&gt;

&lt;p&gt;NOT: Hata bulursanız ya da eklemek istediğiniz birşeyler olursa yorum bırakmayı unutmayın. &lt;/p&gt;

&lt;p&gt;Görüşmek üzere…&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jan 2015 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/git-ile-panik-yonetimi/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/git-ile-panik-yonetimi/</guid>
        
        <category>Dersler</category>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Clojure&#39;da Basit Veri Türleri</title>
        <description>&lt;p&gt;Clojure dilini anlamaya başlamak için öncelikle basit veri türlerini anlamaya başlamak gerek. Daha önce &lt;strong&gt;Clojure ile JVM ve Lisp dünyasına ‘Merhaba Dünya’&lt;/strong&gt; yazımda &lt;em&gt;Leiningen&lt;/em&gt; isimli bir uygulamadan da bahsetmiştim. Şimdi bu yazımda leiningen yardımıyla Clojure ile JVM ve Lisp dünyalarına dalışa devam edeceğiz. Eğer o yazımı okumadıysanız &lt;a href=&quot;http://turhancoskun.com/blog/clojure-ile-jvm-ve-lisp-dnyasna-merhaba-dnya/&quot;&gt;&lt;strong&gt;buraya&lt;/strong&gt;&lt;/a&gt; tıklayarak ulaşabilirsiniz.&lt;/p&gt;

&lt;p&gt;Clojure, bir LISP lehçesi olarak çekirdeği küçük tutulup makrolar ile genişletilmesi düşünülmüş bir dil olmasına rağmen, JVM tabanlı bir dil ve bu nedenle Java kütüphanelerine de erişimi var. Clojure öğrenmek için veri yapılarına ve makrolar gibi başka ileri düzey konulara ilerlemeden önce mutlaka öğrenilmesi gereken konu basit veri türleri ya da başka bir deyişle değişken türleridir. &lt;/p&gt;

&lt;p&gt;Makelem boyunca bütün anlatımlarımı REPL üzerinden yapacağım. Leiningen ile REPL çalıştırmak için. &lt;code&gt;lein repl&lt;/code&gt; komutunu kullanabilirsiniz. Ayrıca tab ile otomatik tamamlama özelliği sayesinde ilgili kütüphaneki diğer fonksiyonları da görebilirsiniz.&lt;/p&gt;

&lt;p&gt;Clojure terminolojisinde değişkenlere atomlar da denilebiliyor. Clojure değişken tanımlarında birçok dile göre daha özgür.Türkçe karakterler dahil bir çok alfanumerik karakteri değişken isimlerinde kullanma izni veriyor. Örnek: &lt;code&gt;read-string&lt;/code&gt;, &lt;code&gt;is-saved?&lt;/code&gt; ve hatta &lt;code&gt;yağmur-yağıyor-mu?&lt;/code&gt; Clojure dilinde geçerli tanımlamalardır.&lt;/p&gt;

&lt;p&gt;Clojure basit veri türlerini temel olarak aşağıdakiler gibi gruplandırabiliriz:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Boolean (true, false)&lt;/li&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;Sayısal Veriler&lt;/li&gt;
  &lt;li&gt;Düzenli ifadeler (Regular Expressions)&lt;/li&gt;
  &lt;li&gt;Anahtar Kelimeler (Keywords)&lt;/li&gt;
  &lt;li&gt;Fonksiyonlar&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;balamadan-nce&quot;&gt;Başlamadan Önce&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;REPL’in açılımı Read, Eval, Print ve Loop dur. Bizim durumumuzda parantezler arasında kodu REPL’e gireriz ve program &lt;strong&gt;read&lt;/strong&gt; yani okuma işlemini gerçekleştirir, sonra arkaplanda &lt;strong&gt;eval&lt;/strong&gt; eder yani kodu çalıştırır. Örneklerde &lt;code&gt;; =&amp;gt;&lt;/code&gt; ile başlayan satırlar &lt;strong&gt;print&lt;/strong&gt; yani çıktıyı verir. Son olarak &lt;strong&gt;loop&lt;/strong&gt; yani döngü işlemi ile başa döner ve yeni bir satırda, sizden okumak üzere yeni komut bekler. Kısacası REPL olayı bundan ibarettir.&lt;/li&gt;
  &lt;li&gt;REPL ekranı bazen çok kirlenip okunması zor hale gelebiliyor. Clojure, Ruby ya da Python herhangi bir dilde REPL ile çalışıyorsanız Ctrl-L kısayolu sayesinde kolayca ekranı temizleyebilirsiniz. &lt;/li&gt;
  &lt;li&gt;Basit veri türlerinden bahsetmeden önce Clojure’da değişken nasıl tanımlanır onu bilmekte fayda var. Clojure ile değişken tanımlamak için kullanılan şablon en basit haliyle &lt;code&gt;(def &amp;lt;değişken adı&amp;gt; &amp;lt;değişken değeri&amp;gt;)&lt;/code&gt; şeklindedir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;boolean-true-false&quot;&gt;1. Boolean (true, false)&lt;/h2&gt;
&lt;p&gt;Boolean, gerçekten çok basit bir veri türüdür. Aynı zamanda bilgisayar biliminin en önemli veri türlerinden birisidir. İki değer alabilir: true ya da false.&lt;/p&gt;

&lt;p&gt;Clojure’da veri türlerini öğrenmek için kullanılan fonksiyon &lt;code&gt;type&lt;/code&gt; fonksiyonudur. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; java.lang.Boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; java.lang.Boolean&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;type&lt;/em&gt; ile boolean değerlerini incelediğimizde doğrudan Java’dan geldiğini görebilirsiniz. Java zaten mükemmel çalışan boolean türüne sahipken, Amerika’yı yeniden keşfetmemek adına, JVM üzerinde çalışan bir dilin yapacağı en mantıklı hareket bence de budur.&lt;/p&gt;

&lt;p&gt;Boolean türü doğal olarak her dilde olduğu gibi, Clojure’da da if ifadelerinin gözdesi:&lt;/p&gt;

&lt;p&gt;Örnek:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ya&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ğ&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mur-ya&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ğı&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yor?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ya&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ğ&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mur-ya&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ğı&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yor?&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Şemsiye al&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Şemsiyeye gerek yok&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; Şemsiyeye gerek yok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If koşulları yazarken bilinmesi gereken bazı hususlar var. Farklı diller farklı değerleri true ya da false kabul edebiliyor.&lt;/p&gt;

&lt;p&gt;Clojure’da if içinde &lt;code&gt;false&lt;/code&gt; olarak çalışan atomlar sadece &lt;strong&gt;false&lt;/strong&gt; ve &lt;strong&gt;nil&lt;/strong&gt; ‘dir.
Birçok dilin aksine &lt;strong&gt;”“&lt;/strong&gt;(boş string), &lt;strong&gt;()&lt;/strong&gt;(boş liste) ve &lt;strong&gt;0&lt;/strong&gt;(sıfır) &lt;code&gt;true&lt;/code&gt; olarak kabul edilir.&lt;/p&gt;

&lt;h2 id=&quot;string&quot;&gt;2. String&lt;/h2&gt;

&lt;p&gt;Clojure’da string veri türünün arkasında Java’nın UTF-16 stringleri yer alıyor ve durum pek çok dille uyumlu çalışması anlamına geliyor. JVM’den aldığı güçle Java’nın string genişletme metodlarını kullanabileceğiniz gibi fazla geniş olmasa da Clojure da kendi string kütüphanesine sahip.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Merhaba Dünya!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; java.lang.String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;string-ile-yaplabilecek-basit-ilemler&quot;&gt;String ile yapılabilecek basit işlemler&lt;/h3&gt;

&lt;p&gt;Clojure ile Java’nın string fonksiyonlarını kullanabileceğiniz gibi Clojure bu işler için görece küçük bir kütüphane de barındırıyor.&lt;/p&gt;

&lt;h4 id=&quot;bo-string-testi&quot;&gt;Boş string testi&lt;/h4&gt;

&lt;p&gt;blank? fonksiyonunun arkasındaki soru işareti “?” bize biraz Ruby’yi hatırlatıyor. :)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/blank?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/blank?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tabiki her seferinde clojure.string yazmak uzun olacağı için &lt;code&gt;alias&lt;/code&gt; tanımlamamız daha doğru bir yaklaşım olacaktır.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clojure.string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bu durumda yukarıdaki örneği aşağıdaki gibi tekrar yazabiliriz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/blank?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;byk-kk-harf-evirme&quot;&gt;Büyük Küçük Harf Çevirme&lt;/h4&gt;

&lt;p&gt;REPL Üzerinde deneylerimize devam edersek:&lt;/p&gt;

&lt;p&gt;Büyük harfe çevirme:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/upper-case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;küçük harfli yazı&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;KÜÇÜK HARFLI YAZI&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Baş harfi büyütme:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/capitalize&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;küçük harfli yazı&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;Küçük harfli yazı&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Küçük harfe çevirme:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/lower-case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;BÜYÜK HARFLİ YAZI&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;büyük harfli̇ yazi&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;string-krpma&quot;&gt;String Kırpma&lt;/h4&gt;

&lt;p&gt;String veri türü ile ilgili olmazsa olmaz işlemlerden biri &lt;em&gt;trim&lt;/em&gt; yani kırpmadır. Birçok yerde yazılardan yeni satır(\n), tab(\t) ve &lt;em&gt;white space&lt;/em&gt; dediğimiz boşlukları temizlememiz gerekir.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/trim&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\tMerhaba trim   \n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;Merhaba trim&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;trim ile string verilerinizin iki tarafınıda kırpabilirsiniz. Sadece sağ ve sol taraflarını kırpmak için &lt;code&gt;trimr&lt;/code&gt; ve &lt;code&gt;triml&lt;/code&gt; fonksiyonları kullanılır. Kullanış şekilleri normal trim metodu ile aynıdır.&lt;/p&gt;

&lt;h4 id=&quot;stringi-ksmen-deitirme&quot;&gt;String’i kısmen değiştirme&lt;/h4&gt;

&lt;p&gt;Başka programla dillerinden de bildiğimiz &lt;code&gt;replace&lt;/code&gt; fonksiyonu. String içinde eşleşen parçaları bizim istediğimiz başka bir string ile değiştirir.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/replace&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Merhaba world&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dünya&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;Merhaba dünya&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi replace fonksiyonu üç parametre alıyor. Yukarıdaki kod “Merhaba world” stringinde “world” gördüğü yeri “dünya” ile değiştirir. Dikkat edilmesi gereken nokta birinci parametrede geçen “world” gördüğü her eşleşmeyi “dünya” olarak değiştirecektir. Sadece ilk gördüğü noktayı değiştirmesini istersek:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/replace-first&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;world world world&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dünya&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;dünya world world&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;şeklinde kullanabiliriz.&lt;/p&gt;

&lt;p&gt;Clojure string API’sinde bulunan tüm string metodlarını burada yazmayacağım. Diğerlerini görmek için &lt;a href=&quot;http://clojure.github.io/clojure/clojure.string-api.html&quot;&gt;http://clojure.github.io/clojure/clojure.string-api.html&lt;/a&gt; adresini ziyaret edebilirsiniz.&lt;/p&gt;

&lt;h4 id=&quot;java-string-interop&quot;&gt;Java String Interop&lt;/h4&gt;

&lt;p&gt;Clojure JVM tabanlı bir dil olduğu için Java kütüphanelerine doğal erişimi olduğunu söylemiştim. Clojure stringlerinin Java string türü olduğunu ise makalenin en başında &lt;code&gt;type&lt;/code&gt; fonksiyonu ile doğrulamıştık. Aşağıdaki örneklerle Java’nın string API’sinde bulunan instance metodlarına nasıl erişildiğini görebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.indexOf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clojure&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.length&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clojure&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 7&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.matches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clojure&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;clojure&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Örnekler bu şekilde çoğaltılabilir. java.lang.String API dokümantasyonu için &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/String.html&quot;&gt;buraya&lt;/a&gt; ve Clojure üzerinden Java kütüphanelerine erişim ile ilgili kaynak için &lt;a href=&quot;http://en.wikibooks.org/wiki/Learning_Clojure/Calling_Java&quot;&gt;buraya&lt;/a&gt; tıklayabilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;saysal-veriler&quot;&gt;3. Sayısal Veriler&lt;/h2&gt;
&lt;p&gt;Clojure sayıları ifade etmek için pek çok sayısal veri türü barındırır. Basitçe tam sayılar, ondalıklı sayılar ve kesirler) için farklı farklı veri türleri vardır. (int, long, double, BigInteger, BigDouble, BigDecimal, Ratio)&lt;/p&gt;

&lt;p&gt;Bu veri türlerinin belleği nasıl kullandığı, en küçük ve en büyük değerlerinin neler olduğunu dokümantasyona bakarak öğrenebilirsiniz.&lt;/p&gt;

&lt;p&gt;Burada özellikle üstüne durmak istediğim veri türü &lt;code&gt;Ratio&lt;/code&gt; yani rasyonel sayı ve kesir olarak tabir ettiğimiz sayı türünü ifade etmek için kullanılır.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;/4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; clojure.lang.Ratio&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;type fonksiyonu ile veri türünü tespit etmeye çalıştığımızda veri türünün Ratio olduğunu ve Clojure’ın kendi kütüphanelerinde tanımlandığını görüyoruz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;java.lang.Double&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ondalıklı bir sayı ile deney yaptığımızda ise Java’nın double sınıfına bağlı. Ondalıklı sayıları ifade eden double tipindeki değerleri kesir değerlerine dönüştürmek ise gerçekten çok kolay.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rationalize&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 9/20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Uygulamalara kullanıcıdan gelen girdiler çoğunlukla string türünde olur ve bunlarla matematiksel işlem yapabilmek için sayısal türlere çevirmemiz gerekir. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Double/parseDouble&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-0.45&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; -0.45&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Int/parseInt&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;45&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 45&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sayısal verilerden bahsetmeye başlamışken, Math kütüphanesindeki statik fonksiyonlardan bahsetmeden olmaz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; java.lang.Class&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/pow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 16.0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 3.141592653589793&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Math/round&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Math/PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;dzenli-fadeler-regular-expressions&quot;&gt;4. Düzenli İfadeler (Regular Expressions)&lt;/h2&gt;
&lt;p&gt;Clojure düzenli ifade tanımlamak string tanımlamaya çok benziyor. String tanımının önüne &lt;strong&gt;#&lt;/strong&gt; eklemeniz yeterli. &lt;code&gt;#&quot;[a-Z]&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Regex veri türünün hangi kütüphanede tanımlı olduğunu öğrenmek için:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[a-z]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; java.util.regex.Pattern&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Clojure’da regex işlemlerini yürütebileceğiniz “re-“ ön eki ile başlayan toplam 6 fonksiyon bulunur: re-find, re-groups, re-matcher, re-matches, re-pattern ve re-seq&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;re-seq &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0-9]&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc1d2ef3g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; (&amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;6 fonksiyonun tümü için açıklamaları &lt;a href=&quot;http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/re-find&quot;&gt;burada&lt;/a&gt; bulabilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;anahtar-kelimeler-keywords&quot;&gt;5. Anahtar Kelimeler (Keywords)&lt;/h2&gt;
&lt;p&gt;Anahtar kelimeler deyince ilk anda insanın aklına birçok programlama dilindeki &lt;em&gt;token&lt;/em&gt; ifadeler geliyor. Yani &lt;code&gt;while, for, class&lt;/code&gt; gibi. Ama Clojure dilinde anahtar kelime yani &lt;strong&gt;keyword&lt;/strong&gt; deyince akla ilk gelen iki nokta üstüste(:) ile başlayan değerler. Bunları daha çok Ruby dilindeki sembollere benzetebiliriz. Örneğin &lt;code&gt;:foo, :bar&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; clojure.lang.Keyword&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Başka bir yazıda anlatmayı planladığım “Clojure’da Veri Yapıları” konusunda göstereceğim &lt;strong&gt;map&lt;/strong&gt; yapısında bolca kullanılırlar. Keyword kullanmanın en önemli avantajlarından birisi de if ile yapılan eşitlik testlerinde çok büyük hız avantajı sağlamalarıdır.&lt;/p&gt;

&lt;p&gt;Keyword veri türü ile küçük deneyler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keyword? &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-keyword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keyword &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; #&amp;#39;user/my-keyword&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; :foo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keyword? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;fonksiyonlar&quot;&gt;6. Fonksiyonlar&lt;/h2&gt;

&lt;h3 id=&quot;birinci-snf-vatanda-fonksiyonlar&quot;&gt;Birinci sınıf vatandaş fonksiyonlar&lt;/h3&gt;
&lt;p&gt;En güzel kısmı en sona bıraktım. Clojure bir fonksiyonel programlama dili ve bu da demek oluyor ki bu dilde fonksiyonlar birinci sınıf vatandaşlar. Bu tabiri ilk kim kullanmış bilmiyorum ama gerçekten cuk oturuyor. Aslında buraya kadar pek çok hazır fonksiyon kullanarak geldik. Örn: re-seq, println aslında hep birer fonksiyondu.&lt;/p&gt;

&lt;h3 id=&quot;ekirdek-fonksiyonlar&quot;&gt;Çekirdek Fonksiyonları&lt;/h3&gt;
&lt;p&gt;Şu ana type fonksiyonunu hep başka tanımlamalara karşı kullandık. Şimdi silahı kendisine çevirelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; clojure.core$type&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Çıktıyı not edelim ve irdelemeye devam edelim.&lt;/p&gt;

&lt;p&gt;Bir çok programlama dilini öğrenirken bize topla(), cikar() gibi temel fonksiyonların operatör denilen özel ifadelerle nasıl uygulanabileceği öğretilir. Şimdi bu durum Clojure’da nasılmış ona bakalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yazım şekli bir yerlerden tanıdık geldi mi? Hadi bu “+” neymiş ona da bakalım?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; clojure.core$_PLUS_&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;clojure.core$type&lt;/code&gt; ve &lt;code&gt;clojure.core$_PLUS_&lt;/code&gt; hmm bir yerlere geliyoruz sanırım.&lt;/p&gt;

&lt;h3 id=&quot;kullanc-tanml-fonksiyonlar&quot;&gt;Kullanıcı Tanımlı Fonksiyonlar&lt;/h3&gt;
&lt;p&gt;Kullanıcı tanımlı fonksiyonlar anonim ya da isimlendirilmiş olabilirler. Bir Lisp lehçesi olarak Clojure, fonksiyon tanımlayabilmek için öntanımlı makrolar kullanır. Makroların çağırılması ise diğer fonksiyonlar(+, type, vs) ve özel formlar(if, def) ile aynıdır. İlk parantezden sonra anahtar kelime gelir. Böyle yazınca karışık oldu biliyorum.&lt;/p&gt;

&lt;p&gt;Şimdi aşağıdaki JavaScript örneğini inceleyelim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Merhaba, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;selamla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Turhan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &amp;quot;Merhaba, Turhan&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aynı kodun Clojure versiyonu aşağıdaki gibi olacaktır.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Merhaba, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Turhan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;Merhaba, Turhan&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;İsimlendirilmiş fonksiyon tanımlarını &lt;code&gt;defn&lt;/code&gt; makrosu ile yaptık. Peki ya anonim fonksiyonları nasıl tanımlıyoruz? Aşağıdaki JavaScript örneğine göz atalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Merhaba, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;selamla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Turhan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &amp;quot;Merhaba, Turhan&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JavaScript bilmeyipte bana küfür edenler için burada ne olduğunu açıklayayım. Teknik olarak bu kod ile daha önceki JavaScript kodu aynı işi yapıyor ancak tanımlamalarından gelen bir farklılık var. Biri doğrudan isimli bir fonksiyon olarak oluşturulmuş, diğeri ise &lt;strong&gt;anonim bir fonksiyon ve olduğu gibi bir değişkene atanmış&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Fonksiyonel programlama dillerinde fonksiyonlar bir veri türü olarak iş görürler ve doğrudan değişkenlere atanabilir, isim vermeye bile gerek kalmadan yine bir veri türü olarak başka bir fonksiyona parametre olabilir, hatta başka bir fonksiyonun dönüş değeri de olabilirler. Bu durum Clojure için de geçerli.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Merhaba, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selamla&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Turhan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;Merhaba, Turhan&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Son örneğimizde &lt;code&gt;fn&lt;/code&gt; Clojure dilinde anonim fonksiyon oluşturan makro. &lt;code&gt;def&lt;/code&gt; ise değişken tanımlayan &lt;em&gt;özel form&lt;/em&gt; ve bunların birleşimi ile anonim fonksiyonu değişkene bağlayarak kullanıcı tanımlı bir fonksiyon oluşturmuş olduk.&lt;/p&gt;

&lt;p&gt;Basit veri türlerinin sonuna geldik. Başka bir yazımda bu basit veri türlerini bağlayan, bir araya getiren veri yapılarından bahsedeceğim. Şimdilik hoşçakalın.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Jan 2015 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/clojure-ile-basit-veri-turleri/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/clojure-ile-basit-veri-turleri/</guid>
        
        <category>Clojure</category>
        
        <category>Dersler</category>
        
        
      </item>
    
      <item>
        <title>Ruby ve Shell ile kolay yoldan web server</title>
        <description>&lt;p&gt;Ruby ve Python gibi betik dilleri hayatımızı kolaylaştıran çok önemli
yardımcılarımız. Özellikle Ruby dili mutluluğumuzu daim eden sevdiceğimiz. Şimdi
size Ruby dili ve küçük bir shell komutu yardımıyla 1 saniyeden kısa sürede
aktif olan yerel bir web sunucusu nasıl yapılır onu gösteriyorum. Tabiki bunu
yapabilmek için Linux, BSD ya da OS X gibi *nix tabanlı bir işletim sistemi kullanmalısınız.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Komut satırından bu kodu girdiğimizde bize hangi shell programını kullandığımızı söyleyecek&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Bendeki durumda /bin/zsh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Komut satırının verdiği sonuca göre hangi shell kullanıldığını öğrendiğimize göre sıra o shell
programının ayar dosyasına gerekli alias eklemesini yapacağız.&lt;/p&gt;

&lt;p&gt;Bu durumda zsh kullananlar için ~/.zshrc ve bash kullananlar için ise ~/.bashrc dosyalarının altına
aşağıdaki satırı giriniz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;servehere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ruby -run -ehttpd . -p8000&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Kaydedip çıktıktan sonra statik html dosyalarınızın olduğu klasöre konsoldan girip:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Örn cd ~/project/template&lt;/span&gt;
servehere&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutunu girin. Eğer böyle bir komut bulunamadığına dair hata alırsanız:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rehash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutuyla tekrar deneyin. Eğer yine hata alırsanız konsol penceresini kapatıp tekrar açarak deneyin. :)&lt;/p&gt;

&lt;p&gt;Tarayıcınızın penceresinden http://localhost:8000 adresine girerek statik html dosyalarınızı hatta JavaScript ile Ajax Sorgularınızı test edebilirsiniz.&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Dec 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/ruby-ve-komut-satiri-ile-localhost/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/ruby-ve-komut-satiri-ile-localhost/</guid>
        
        <category>İpucu</category>
        
        <category>Ruby</category>
        
        <category>Komut Satırı</category>
        
        
      </item>
    
      <item>
        <title>Clojure ile JVM ve Lisp dünyasına &#39;Merhaba Dünya&#39;</title>
        <description>&lt;p&gt;Lisp ve JVM’in buluştuğu Clojure ile ne zamandan beri tanışmak istiyordum. Clojure,
söylenenlere göre Lisp fanatiklerinin Lisp’de en sevdiği özelliklerin tutulduğu ve nefret
edenlerinin en nefret ettiği parçaların çıkarıldığı bir programlama dili. Java
sanal makinesi üzerinde çalıştığı için bütün Java kütüphanelerini kullanabiliyor,
Java ve diğer JVM dilleriyle ortak kullanabileceği kod tabanları oluşturabiliyor.
Kod yapısına baktığınızda direkt Lisp gibi görünse de parantez kullanımı biraz daha
azaltılmış. Lisp yapısının haricinde dilin harika özellikleri var.&lt;/p&gt;

&lt;p&gt;Fonksiyonel programlama son zamanlarda oldukça popüler. Fonksiyonel programlamada
yazılım kalitesini arttıracak önemli konseptler ve yaklaşımlar bulunuyor. Zaman zaman
bunları Ruby ve Python gibi dillere de uyarladığımız oluyor(immutable object vs).
Ancak gerçek hayatta işler malesef tamamen fonksiyonel olmuyor. Zaten saf fonksiyonel programlama
her problemin çözümü olsaydı bugün saf fonksiyonel bir dil olan Haskell gibi diller en yaygın dillerden olurdu. Scala,
Erlang, F#, Groovy vs birçok fonksiyonel dilden Clojure seçmemdeki temel sebep Lisp mantığının
hayat kolaylaştırıcı yönlerinin modern standartlarla buluşması ve fonksiyonel programlamanın gerçek hayat senaryolarına
uygun olan yönlerini mantıklı bir şekilde harmanlaması oldu.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lisp lehçesi olması&lt;/li&gt;
  &lt;li&gt;Fonksiyonel programlamanın iyi yönlerini alması&lt;/li&gt;
  &lt;li&gt;Thread-safe olması&lt;/li&gt;
  &lt;li&gt;Güçlü ve kolay kullanılan paralel programlama özellikleri olması&lt;/li&gt;
  &lt;li&gt;Büyük ve küçük ölçekli projelere uygun olması&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yukarıda saydığım özelliklerin büyük çoğunluğu kısmen veya tamamı birçok dilde zaten var.
Ancak bütün bunların haricinde ben bilhassa o dilde kod yazarken aldığım zevke bakıyorum. Bu nedenle
Clojure bana uzun süre arkadaşlık edecekmiş gibi duruyor.&lt;/p&gt;

&lt;p&gt;Örn Java ile boş string testi yapmak için:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isBlank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isWhitespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aynı kodun clojure ile yazılması:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;blank?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;every? &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Character/isWhitespace&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tek satırda işi bitirmek ne güzel değil mi? Özellikle farklı bir tarz syntax ile. :)&lt;/p&gt;

&lt;p&gt;Herkesin bildiği üzere çok kod beraberinde daha çok hata ihtimali, daha uzun yazma
süresi ve bakım konusunda daha büyük zorluklar getirir. Uzun lafın kısası çok kod eşittir çok
maliyet. Aslında bu noktada Clojure, girişimlerin de seveceği bir programlama dili.&lt;/p&gt;

&lt;p&gt;Öncelikle Clojure kullanmaya başlamak için &lt;em&gt;Leiningen&lt;/em&gt; isim bir araç yükledim. Pek çok
alternatifi olmasına rağmen en hoşuma giden bu oldu. Nedir diye sorarsanız Ruby’den bildiğimiz &lt;em&gt;rake&lt;/em&gt; gibi
bir komut satırı aracı. Terminal’e &lt;em&gt;lein&lt;/em&gt; adında bir komut ekliyor. Aslında rake’den ziyade&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rake&lt;/li&gt;
  &lt;li&gt;gem&lt;/li&gt;
  &lt;li&gt;rails (CLI olarak)&lt;/li&gt;
  &lt;li&gt;repl&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gibi birçok aracım kullanışlı bir şekilde bir araya gelmesi diyebiliriz. &lt;em&gt;Leiningen&lt;/em&gt; yüklemek
için OS X kullanıyorsanız :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install leiningen&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutunu kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Daha sonra komut satırına&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;lein new helloapp
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;helloapp
find .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutlarını girerek tipik bir leiningen projesinin yapısı görebilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;lein &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutu ile lein ile çalıştırabileceğiniz komutların listesini kontrol edebilirsiniz.&lt;/p&gt;

&lt;p&gt;Bu noktada Lisp dünyasına ‘merhaba’ demek için&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;lein repl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komut satırında &lt;strong&gt;user=&amp;gt;&lt;/strong&gt; promptunun olduğu satıra:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Merhaba Dünya&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;İşte bu kadar.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/clojure-ile-jvm-ve-lisp-dnyasna-merhaba-dnya/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/clojure-ile-jvm-ve-lisp-dnyasna-merhaba-dnya/</guid>
        
        <category>Clojure</category>
        
        <category>Dersler</category>
        
        
      </item>
    
      <item>
        <title>Rails ile TDD - 3 (Controller&#39;ların test edilmesi)</title>
        <description>&lt;p&gt;Yazı dizimizin üçüncü bölünme MVC’nin C’si yani Controller testlerinin nasıl
yapıldığını öğreneceğiz.&lt;/p&gt;

&lt;p&gt;Controller testleri aslında birçok yönden model testlerinden farklı değiller.
Controller testlerinin en büyük faydalarından biri de kodumuzda büyük ölçekli
refactor işlemleri uyguladığımızda, uygulamamızda  meydana gelen davranış şekillerinin
zamanında farkedilerek can simidi vazifesi görmeleri olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peki controller üzerinde neleri test edeceğiz?&lt;/strong&gt;
Bu sorunun yanıtı biraz geliştiriciye ve uygulamaya bağlı olsa da bazı temel
şeyleri mutlaka test etmenizi öneririm.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mime Type: Dönen yanıt istediğimiz formatta mı? html, json, xml vs.&lt;/li&gt;
  &lt;li&gt;Http Status: Dönen http yanıt kodu doğru mu? 201, 200, 400, 403 vs&lt;/li&gt;
  &lt;li&gt;Template: Bizim istediğimiz şablon mu gösteriliyor? new, edit vs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TDD ile geliştirme yaparken sürekli editör ile konsol arasında gidip gelmek yorucu
olabilir. Böyle bir durumda eğer benim gibi text editör olarak vim kullanıyorsanız
tmux adındaki terminal çoklayıcı kullanarak ekranı bölebilir ve hatta guard gibi
bazı ruby gemleri yardımıyla test dosyalarınız değiştikçe otomatik çalışmalarını
sağlayabilirsiniz. Daha sonra Rails geliştirme ortamları hakkında ayrı bir yazı yazarak,
kıyaslamalar yapmayı ve bu konu hakkında fikirler paylaşmayı düşünüyorum.&lt;/p&gt;

&lt;p&gt;Yazının bu kısmından itibaren controller yerine denetleyici tanımını kullanacağım. O yüzden
bu denetleyici nereden çıktı diye şaşırmayın derim.&lt;/p&gt;

&lt;h2 id=&quot;users-denetleyicisi&quot;&gt;Users Denetleyicisi&lt;/h2&gt;

&lt;p&gt;Öncelikle User denetleyicisi için test yazacağız ve bu sefer herşeyi manuel gerçekleştirelim.
Yani rails generate komutu kullanmak yerine dosyaları bir bir kendimiz oluşturalım.
Rails ile denetleyici testlerini manuel yoldan geçirebilirseniz bu işin mantığını büyük çoğunlukla
anlamışsınız demektir.&lt;/p&gt;

&lt;p&gt;Genel Beklentilerimiz:
1. User email adresini girdiğinde email, daha önce kayıtlı ise doğrudan Todo listesine yönlenecek
2. Email adresi kayıtlı değilse, email adresi veri tabanına kaydedilip, todo listesine yönlececek&lt;/p&gt;

&lt;p&gt;Model testlerimizin spec klasörü altında models isimli dizinde tutulduğunu önceki bölümden
hatırlayın. Şimdi ise bize gereken bir controllers/ dizini.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -b users-controller
mkdir spec/requests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi ise yeni oluşturduğumuz controllers dizininde users_spec.rb isimli bir dosya oluşturun.
Denetleyici tanımları çoğul eki ile yapıldığı için onun test edileceği spec dosyasını da
bu kurala uygun olarak oluşturduk. Daha önce Rails’in birçok önkabul ile işlediğini söylemiştim.
Denetleyici isimlerinin çoğul takısı ile yapılması da bunlardan birisi.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:controller&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET #new&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assigns a user to @user class variable&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST #create&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;when valid&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;saves the user to database&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;when invalid&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rerenders the :new template&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yazım dili olarak model testlerinden çok da farklı değil gördüğünüz gibi. Tanımlarken
kullandığımız :type artık :model yerine :controller oldu. Testlerde büyük harflerle
http metotlarını ve # karakterinin ardın hangi ‘action’ çağrılacağını belirttik. Okunaklı
testler yazmak açısından bu stil kurallarını takip etmek önemli. Bu konuda daha fazla
bilgiye ulaşmak için &lt;a href=&quot;http://betterspecs.org/&quot;&gt;Better Specs&lt;/a&gt; sitesini incelemenizi tavsiye ederim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rspec spec/controllers/users_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Kodunu çalıştırdığımızda, doğal olarak UsersController diye bir tanım olmadığını söyleyecek.
İlk önce denetleyici tanımını yapmak için app/controllers/users_controller.rb dosyasını oluşturun ve
içeriğini aşağıdaki gibi doldurup kaydedin.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testi tekrar çalıştırdığınızda sarı renkte bekleyen testlerin listelendiğini göreceksiniz.&lt;/p&gt;

&lt;p&gt;Şimdi users_spec.rb dosyasını tekrar açalım ve aşağıdaki düzenlemeleri yapalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assigns a user to @user class variable&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assigns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test kodumuzu çalıştırdığımızda bize Users#new ile eşleşen bir rota olmadığı hatasını verecek.&lt;/p&gt;

&lt;p&gt;config/routes.rb dosyasını açıp gerekli rota eklemesini yapalım. İçerisinde yorum satırı
yapılmış bir sürü örnek rota göreceksiniz. Onları daha sonra incelemeniz için silmiyorum.
Aşağıdaki gibi olacak şekilde koda ekleme yapın.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi test kodumuzu tekrar çağırıp kontrol edelim. Aldığımız hata çıktısı :
&lt;em&gt;The action ‘new’ could not be found for UsersController&lt;/em&gt; Yani bu hatadan sıyrılmak için
UsersController sınıfında :new adında bir metot oluşturmamız gerekecek. Bunun için
app/controllers/users_controller.rb dosyasını açıyoruz va aşağıdaki gibi düzenliyoruz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testi çalıştırdığınızda MissingTemplate hatası alacaksınız. Bu hatanın sebebi artık Rails
uygulamamız /users/new url’si çağrıldığında hangi kod dilimini çağırması gerektiğini biliyor
ancak html içeriğinin yerini bulamıyor. Sadece hatanın geçmesini sağlamak için app/views/users/new.html.erb
dosyasını oluşturmanız yeterli.&lt;/p&gt;

&lt;p&gt;Unix tabanlı bir sistemde kısaca aşağıdaki komutu yazabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir app/views/users
touch app/views/users/new.html.erb
rspec spec/requests/users_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Artık testimizi geçirmek için sona geldik. Gerekli alt yapının hazırlanması tamamlandı. Şu an
ekranda gördüğünüz hata eksik bir dosya ya da tanımlanmamış bir sınıftan ziyade karşılanılmamış
bir beklenti olması gerekiyor. Yani @user değişkenine yeni bir user atamak. Denetleyici dosyasını
app/controllers/users_controller.rb adresinden tekrar açıp aşağıdaki düzenlemeyi yapın.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Testi çalıştırdığınızda bir yeşilimiz olacak.&lt;/p&gt;

&lt;p&gt;spec/controllers/users_spec.rb dosyasını tekrar açarak testlerimizi yazmayı sürdürelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;when valid&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;saves the user to database&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;person@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi burada farklı bir except yapısı kullandık. Rspec belgelendirmelerini
incelerseniz bu tip farklı yaklaşımlarla karşılaşabilirsiniz. Burada post metodunun
kullanı sayısını 1 arttırmasını bekliyoruz.&lt;/p&gt;

&lt;p&gt;Testi çalıştırın. No route yazısı ile karşılaştıysanız nereden başlamamız gerektiğini
tahmin edersiniz diye umuyorum.&lt;/p&gt;

&lt;p&gt;Hemen config/routes.rb dosyasını tekrar açıp daha önce yazdığımız satırı aşağıdaki gibi
dikkatlice düzenleyin.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not: Burada only: kısmının artık bir array (dizi değişkeni) olduğuna dikkat edin.&lt;/p&gt;

&lt;p&gt;Testi çalıştırın ve göreceksiniz ki :
&lt;em&gt;The action ‘create’ could not be found for UsersController&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Post olayı için yazdığımız beklentilere bakarsanız, veri tabanına başarı ile kaydetmesini
hata olması halinde ise yeniden :new şablonunu görüntülemesini istiyoruz. Denetleyici
dosyası açıp aşağıdaki gibi düzenleyin.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:todos&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burada değinmem gereken birkaç nokta olduğunu düşünüyorum. Öncelikle user_params
diyerek izin verilen parametreleri tek tek bildirmemiz gerekiyor. Rails’in bu özelliğine
&lt;em&gt;Strong Parameters&lt;/em&gt; deniliyor. Uygulamaların güvenliği açısında müthiş bir özellik. Daha
ayrıntılı bilgiyi &lt;a href=&quot;http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html&quot;&gt;buraya&lt;/a&gt;
tıklayarak bulabilirsiniz.&lt;/p&gt;

&lt;p&gt;session ile kullanıcı id’sini depoladık. Bu basitçe bize Todos kısımlarına girdiğimizde
yetkilendirme yapmamızı sağlayacak. redirect_to :todos kısmı kodu çalıştırdığınız anda
öyle bir rota tanımı olmadığı için hata verecektir. Bu kısmı kestirme geçmek için config/routes.rb
dosyasında daha önce User tanımı için yaptığımız rota tanımının hemen altına&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:todos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;satırını ekleyin. Bu gerekli tanımların oluşmasını otomatik olarak sağlayacaktır.
@user.save ifadesi bize bir boolean yani true-false yanıtı döndürüyor. Bunu koşullandırma
ifadesi içine alırken bir hata oluşması durumunda tekrar :new şablonunu göstermesi gereken
kısmı da boş geçmedik.&lt;/p&gt;

&lt;p&gt;Son tanımladığımız rotadan sonra rotaların ne durumda olduğunu test etmek için terminal
ekranına&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rake routes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutunu girerek otomatik oluşturan rota yardımcı metotlarını inceleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Şimdi test kodumuzu çalıştırdığımızda testimizin geçmesi gerekiyor.&lt;/p&gt;

&lt;p&gt;Test dosyamızı açarak düzenlemeye devam edelim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;when invalid&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rerenders the :new template&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;wrong email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Gördüğün gibi testlerimiz artık hatalı bir email adresi olduğunu da farkedebiliyor.&lt;/p&gt;

&lt;p&gt;User denetleyici ile yazılan testlerin sonuna geldik. Burada dikkat ederseniz bütün adımları
elle oluşturarak geldik. TDD öğrenmek için bu şekilde basit bir denetleyici oluşturup
olabildiğince çok adıma yaymam gerekiyordu. Tabiki pratikte bu kadar basit adımları manuel
yapmak çok da efektif olmayabilir. Denetleyici için mutlaka test yazın ama bu testleri
rails generator kullandıktan sonra da yazabilirsiniz. Tıpkı TodosController oluşturduktan sonra
yapacağımız gibi. Değişiklikleri git repomuza kaydedip devam edelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Users Controller ve Testleri&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;todos-denetleyicisi&quot;&gt;Todos Denetleyicisi&lt;/h2&gt;

&lt;p&gt;TDD mantığını büyük ölçüde anladığımıza göre artık işleri biraz daha hızladırmak adına
Todos denetleyicinin tüm yapım aşamalarını burada tek tek açıklamayacağım. Ancak çalışan
bir versiyonunu GitHub reposundan her zaman inceleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/turhancoskun/rails-ile-tdd&quot;&gt;https://github.com/turhancoskun/rails-ile-tdd&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Nov 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/rails-ile-tdd--3-controllerlarn-test-edilmesi/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/rails-ile-tdd--3-controllerlarn-test-edilmesi/</guid>
        
        <category>Ruby</category>
        
        <category>Ruby on Rails</category>
        
        <category>TDD</category>
        
        <category>Dersler</category>
        
        
      </item>
    
      <item>
        <title>Rails ile TDD - 2 (Modellerin test edilmesi)</title>
        <description>&lt;p&gt;Rails ile TDD serisinin ikinci bölümünde sizlere bir MVC framework olan Ruby on Rails’in
M’i yani model kısmının nasıl test edileceğini anlatmak istiyorum. Hello World’den sonra
ikinci seviye sayılabilecek bir ToDo yani yapılacaklar listesi uygulaması geliştirelim.&lt;/p&gt;

&lt;p&gt;Uygulamada tüm değişken, sınıf, modül vs istisnasız tüm tanımlamalarınızı İngilizce
olarak yapın. Rails’te çok fazla önkabul bulunur ve tüm bu önkabuller İngilizce
dil kurallarına göre çalışır. Bunun faydasından yararlanmak dururken boşuna buna karşı
savaşmayın.&lt;/p&gt;

&lt;p&gt;Gevezeliği bırakırsak örnek uygulamamızın yapısından bahsetmek istiyorum.&lt;/p&gt;

&lt;h2 id=&quot;projenin-planlanmas&quot;&gt;Projenin Planlanması&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Kullanıcı mail adresini girip kendi yapılacaklar listesine giriş yapar (Şifre olmayacak)&lt;/li&gt;
  &lt;li&gt;Yapılacak listesine öğe ekleyip silebilir ya da tamamlandı, tamamlanmadı tercihi yapabilir. Tamamlandı seçeneği seçildiğinde completed_at alanı güncellenir. Tamamlanmadı seçeneği seçildiğinde complete_at seçeneği nil olarak ayarlanır.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bunu gerçekleştirebilmek için bize iki model gerekiyor bunlar User ve Todo&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Todo&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;complete_at&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;DateTime&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;user-modelinin-oluturulmas&quot;&gt;User modelinin oluşturulması&lt;/h2&gt;

&lt;p&gt;TDD yani test güdümlü programlama dediğimize göre demekki öncelikle test yazılması gerekiyor. Önce test yazmak bizi hatalardan koruduğu gibi büyük kod blokları yazarken de bizi motive edip bizi yönlendirecek. Göreceksiniz ki doğru kod yazım yaklaşımı önce test kodu yazmaktır.&lt;/p&gt;

&lt;p&gt;Kısaca TDD’den bahsedersek yapacağımız işlem sırası RED-GREEN-REFACTOR. Bu konu hakkında araştırma yapmayı ve en iyi pratik seviyelerine ulaşmayı size bırakıyorum. R-G-R ‘yi bizim User modelimize uygularsak:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Önce User model testi için gerekli spec/models/user_spec.rb dosyasına beklentilerimizi yazacağız.&lt;/li&gt;
  &lt;li&gt;User modelinin beklentileri karşılaması için beklentileri yazacağız. ( email alanı boş olamaz ve geçerli bir email adresi olmalı gibi )&lt;/li&gt;
  &lt;li&gt;En son testi çalıştıracağız ve kırmızı spec’ler yeşil olana kadar modelimizi geliştireceğiz.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hadi başlayalım:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -b user-model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Konsol ekranımıza aşağıdaki komutu girelim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails g model User email&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aslında burada önce test prensibini kısmen çiğnemiş olduk ama bu koşullarda bizim çıkarımıza bu şekilde ilerlemek daha hızlı. (Pragmatist Programmer kitabını okumanızı şiddetle öneririm)&lt;/p&gt;

&lt;p&gt;Ekran çıktısından gördüğünüz üzere spec/models/user_spec.rb otomatik olarak oluşturuldu. Hemen bu dosyayı açıp inceleyelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;add some examples to (or delete) &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Daha önce bahsettiğimiz rails_helper dosyası en başa gelmiş. User için model tipinde bir spec tanımlanmış. Bu dosyayı birlikte beklentilerimizi karşılayacak şekilde düzenleyeceğiz ama öncelikle olduğu gibi çalıştırıp bir duman testi yapalım. Duman testi, test framework’unun çalışır durumda olduğunu tespit etmek için yaptığımız basit testlere verdiğimiz bir isim.&lt;/p&gt;

&lt;p&gt;İlk testi çalıştırmadan önce akıl sağlımız için ana dizindeki .rspec dosyasını açıp içinden –warning satırını silmenizi öneririm. Aksi halde ekranınızda uyarıdan başka birşey gözükmüyor. Daha sonra konsol ekranında:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rake db:migrate
rspec spec/models/user_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;rake komutu ruby make deyiminin bir kısaltması. Konsolda açık kaynak programların kodlarını derlerken kullandığımız make komutunun ruby versiyonu. db:migrate ise User oluşturulurken otomatik olarak oluşturulan veri tabanı migration dosyasını çalıştırıyor.&lt;/p&gt;

&lt;p&gt;rspec komutunun ardından ekranda&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Not yet implemented&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ./spec/models/user_spec.rb:4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;çıktılarını gördüyseniz duman testini geçmişsiniz demektir. Artık testimizi icra etmeye başlayabiliriz.&lt;/p&gt;

&lt;p&gt;Öncelikle git repomuza değişiklikleri kaydedelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit &lt;span class=&quot;s2&quot;&gt;&amp;quot;User model oluşturulması&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;tekrar user_spec.rb dosyasını açalım. (Artık yerini biliyoruz değil mi?)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is invalid without email&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is invalid without a valid email address&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_valid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dosyamızı yukarıdaki gibi düzenleyelim. Kodun kendi kendini yeterince iyi açıkladığını düşünüyorum.&lt;/p&gt;

&lt;p&gt;Testler it komutuyla başlıyor ve beklentiler block içinde belirtiyoruz. Beklentilerin yazımı expect metodo parametre olarak karşılaştıracağımız elimizdeki öğeyi alıyor. Ardından gelen .to veya olumsuz hali .not_to ve matcher dediğimiz be_invalid ve be_valid gibi eşleştiriciler izliyor. Rspec eşleştiricileri ile daha ayrıntılı bilgi için rspec dokümantasyonunu incelemenizi öneririm.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rspec spec/models/user_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mevcut durumda her iki spec de kırmızı durumda ve bizim görevimiz bunları yeşile çevirmemiz gerekiyor. Aksi halde kullanıcılar boş email adresleri ekleyebilecek veya aslında email adresi olmayan verileri email alanına yazabilecekler.&lt;/p&gt;

&lt;p&gt;app/models/user.rb dosyasını açalım. Burası User modelinin tanımlandığı yer ve doğrulama işlemlerini burada gerçekleştireceğiz.&lt;/p&gt;

&lt;p&gt;mevcut haliyle user.rb dosyası&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;gibi gözükecektir. Bizim yapacağımız aşağıdaki gibi düzenleyip testi tekrar çalıştırmak.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rspec spec/models/user_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bingo! Hata sayımız 1’e düştü ve beklentilerden biri yeşil ancak diğeri hala kırmızı. Şimdi diğer testi geçirelim.&lt;/p&gt;

&lt;p&gt;Ekran çıktısını incelediğimizde anlıyoruz ki ‘foo’ hatalı bir email adresi olmak zorundayken modelimiz bunun hatalı olduğunu düşünmüyor öyleyse bunu sağlayalım.&lt;/p&gt;

&lt;h4 id=&quot;email-dorulamas&quot;&gt;Email doğrulaması&lt;/h4&gt;
&lt;p&gt;Email doğrulaması için basit gem kullanılabileceği gibi regex de yazılabilir. Dışarıya bağımlılığı minimum düzeyde tutabilmek için regex yolunu tercih ediyorum. Dilerseniz küçük bir araştırmayla email_validator nasıl kullanılır bulabilirsiniz.&lt;/p&gt;

&lt;p&gt;User model dosyamızı tekrar açarak aşağıdaki gibi güncelleyelim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates_format_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rspec spec/models/user_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ve bütün testlerimiz geçti. TDD ile spec dosyamızda User için beklentilerimizi belirledik ve testleri çalıştırdıkca aldığımız ekran çıktılarmı bizi yönlendirdi. Şimdilik User modeli ile işimiz bitti artık git repomuza gereken değişiklikleri kaydedip Todo modeline geçebiliriz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit &lt;span class=&quot;s2&quot;&gt;&amp;quot;User model testleri geçti&amp;quot;&lt;/span&gt;
git checkout master
git merge user-model
git branch -d user-model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;todo-modelinin-oluturulmas&quot;&gt;Todo Modelinin Oluşturulması&lt;/h2&gt;

&lt;p&gt;Todo modelimiz biraz daha karışık. Temelleri zaten User modeli için anlattığımdan burada bazı kısımları kestirme geçebilirim. Örneğin model dosyasını düzenleyin deyince size tam adresini vermeyebilirim ya da test komutunu çalıştırın dediğimde siz rspec komutunun ardından spec dosyasının yolunun geleceğini bilirsiniz diye varsayıyorum.&lt;/p&gt;

&lt;p&gt;Şimdi User modelinde yaptığımız gibi yeni model oluşturalım.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -b todo-model
rails g model Todo title complete_at:date user:belongs_to
rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;user:belongs_to kısmı Todo modelinin user ile bire çok ilişki içinde olduğunu belirtmek için eklendi.&lt;/p&gt;

&lt;p&gt;Şimdi todo_spec.rb dosyasını açarak beklentilerimizi programa belirtelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is invalid without&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a user&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a title&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi konsol ekranından testi çalıştırarak sonuca birlikte inceleyelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Pending:
  Todo is invalid without a user
    &lt;span class=&quot;c&quot;&gt;# Not yet implemented&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ./spec/models/todo_spec.rb:5&lt;/span&gt;
  Todo is invalid without a title
    &lt;span class=&quot;c&quot;&gt;# Not yet implemented&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ./spec/models/todo_spec.rb:6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;İki pending testimiz var ve rspec yazdığımız kod yapısını bizim için dokümantasyona dönüştürdü. Block yani do..end eki almamış it tanımları gördüğünüz gibi pending olarak işliyor. Projelerde bu özellikten sıklıkla faydalanabiliriz.&lt;/p&gt;

&lt;p&gt;Şimdi testimizin içini doldurmaya başlayalım isterseniz. Tekrar todo_spec.rb dosyasını açarak aşağıdaki gibi düzenleyelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is invalid without&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a user&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Kodlar refactor edilecek.&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_valid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a title&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Konsoldan testi çalıştırıp sonuca baktığımızda istediğimiz iki koşulun da model tarafından yerine getirilmediğini görüyoruz. Şimdi kırmızıları yeşil yapmak için Todo modelini açıp aşağıdaki gibi kodları ekliyoruz.
belongs_to :user satırının altına:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;kaydedip testi tekrar çalıştırın. Göreceksiniz ki yerine getirilmesi tek bir koşul kaldı.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;rspec ile testi çalıştırıp tekrar sonucu kontrol ettiğimiz iki yeşilimiz olduğunu göreceksiniz. Ekranda görmeniz gereken sonuç: &lt;em&gt;2 examples, 0 failures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Şimdi Todo ile yaptığımız değişikliklerin programın başka kısımlarında kalan bölümleri bozup bozmadığını görmek için konsola sadece rspec yazın. Bu komut spec dizininde sonu ‘*_spec.rb’ ile biten tüm dosyaları otomatik çalıştıracaktır.&lt;/p&gt;

&lt;p&gt;Eğer bütün testlerimiz geçiyorsa artık git repomuza kaydedebiliriz.&lt;/p&gt;

&lt;p&gt;Unutmadan:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Todo model testleri geçti&amp;quot;&lt;/span&gt;
git checkout master
git merge todo-model
git branch -d todo-model&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;bonus-refactor&quot;&gt;Bonus: Refactor&lt;/h3&gt;
&lt;p&gt;TDD çalışırken izleyeceğimiz yolun Red-Green-Refactor olduğunu daha önce belirtmiştim. Aslında refactor yani kodun yeniden düzenlenip toparlanması her zaman yapılması gereken birşey olsa da testler yeşil olduktan sonra başka bir kod bölümüne geçmeden önce mutlaka elden geçirmek gerekiyor. User sınıfında refactor ihtiyacı olup olmadığı kanaatini size bırakıyorum. Todo test dosyasını açıp inceleyelim.&lt;/p&gt;

&lt;p&gt;Kendini tekrar eden iki satır görünüyor bunlar:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Kod tekrarları DIY - Don’t repeat yourself! yani kendini &lt;em&gt;tekrarlama&lt;/em&gt; prensibine aykırı. Bu sebeple hemen bu kısımları refactor edelim.&lt;/p&gt;

&lt;p&gt;todo_spec dosyasını aşağıdaki gibi tekrar düzenleyin&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is invalid without&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a user&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Kodlar refactor edilecek.&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_valid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a title&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_invalid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fake_user&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Burada kullandığımız subject adından da anlaşılacağı gibi test öznesi ve her context için ayrı ayrı özneler belirtilebilir. User.new ise gördüğünüz gibi bir fonksiyonun dönüş nesnesi oldu ve bu sayede kodumuz daha okunaklı hale gelebildi. Eğer siz de kendinizden birşey katıp kodu daha da sadeleştirmek isterseniz kendinizi bu konuda özgür hissedin çünkü yazdığımız testlerde ne beklediğimizi iyi belirledik ve koşullar yerine geldiği sürece kod içerisinde istersek at koştururuz :=) Bu da TDD programlamanın en avantajlı yanlarından birisi.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/rails-ile-tdd--2-modellerin-test-edilmesi/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/rails-ile-tdd--2-modellerin-test-edilmesi/</guid>
        
        <category>Ruby</category>
        
        <category>Ruby on Rails</category>
        
        <category>TDD</category>
        
        <category>Dersler</category>
        
        
      </item>
    
      <item>
        <title>Rails ile TDD - 1 (Giriş)</title>
        <description>&lt;p&gt;Merhaba, bugün ilk kez Rails ile ilgili bir konudan bahsetmek
istiyorum: &lt;em&gt;Ruby on Rails uygulamalarının TDD ile geliştirilmesi.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Öncelikle yazı dizisinde yer alacak konu başlıklarına bakarsanız:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Giriş (Şu an okuduğunuz bölüm)&lt;/li&gt;
  &lt;li&gt;Model’ler nasıl test edilir&lt;/li&gt;
  &lt;li&gt;Controller’lar nasıl test edilir&lt;/li&gt;
  &lt;li&gt;Json Api ve Integration Test nasıl gerçekleştirilir&lt;/li&gt;
  &lt;li&gt;Capybara ile Acceptance testleri nasıl gerçekleştirilir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu yazı dizisini bitirdiğinizde, kodlarının büyük çoğunluğu test edilebilen, tam teşekküllü bir Rails uygulaması nasıl yapılır ilk adımı atmış olacaksınız.&lt;/p&gt;

&lt;p&gt;Yazı dizisinin bitiminde bonus olarak bir de JavaScript testlerinin de
nasıl yapılacağını, özellikle AngularJS testlerinin nasıl yapılacağı konusuna da değinebilirim(Henüz karar vermedim).&lt;/p&gt;

&lt;p&gt;Bütün anlatımlarımı bir GitHub reposunda paylaşacağım ve tüm commitleri ve kod değişimlerini oradan da takip edebilirsiniz.&lt;/p&gt;

&lt;p&gt;Başlangıç olarak ve anlatılanları daha sağlıklı anlayabilmek açısından en azından başlangıç seviyesinde Ruby dili ve Rails bilmenizi öneririm yine de sıfırdan proje başlatacağım için hali hazırda herhangi bir MVC framework bilen birisi için uygulamanın gidişini takip etmek o kadar da zor olmayacaktır. Git bilmenizi mutlaka öneririm, eğer bilmiyorsanuz git ile ilgili kısımları görmezden gelebilirsiniz.&lt;/p&gt;

&lt;p&gt;Örnekleri geliştirirken versiyon uyumsuzluğu olmaması için kullandığım sürümleri paylaşıyorum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails: 4.1.6&lt;/li&gt;
  &lt;li&gt;Ruby: 2.1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Text editör olarak baştan sona Vim kullanacağım, belki bazı yerlerde Atom Editor kullanabilirim. (SublimeText’i oldum olası sevmedim.) Siz istediğiniz başka bir editör kullanabilirsiniz. Tavsiyem asla IDE kullanmayın, sağa sola saçma sapan dosyalar oluşturarak kafanızı karıştırabilir.&lt;/p&gt;

&lt;h1 id=&quot;rails-projesinin-oluturulmas&quot;&gt;Rails Projesinin Oluşturulması&lt;/h1&gt;
&lt;p&gt;Projenin bulunduğu reponun bağlantısı: &lt;a href=&quot;https://github.com/turhancoskun/rails-ile-tdd&quot;&gt;https://github.com/turhancoskun/rails-ile-tdd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeni proje başlatmak için:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails new rails-ile-tdd -T&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;burada rails-ile-tdd adında yeni bir proje oluşturduk ve -T parametresi ile rails’e herhangi bir testing framework kurmamasını söyledik çünkü herşeyi manuel olarak gerçekleştirmek istiyoruz.&lt;/p&gt;

&lt;p&gt;Rails ile testlerimizi gerçekleştirmek için oldukça popüler olan &lt;a href=&quot;https://github.com/rspec/rspec&quot;&gt;Rspec&lt;/a&gt; kütüphanesini kullanacağız ama öncellikle rails uygulamamızı git ile commit edelim.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rails projesi oluşturuldu&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;rspec-kurulumu-ve-yaplandrlmas&quot;&gt;Rspec Kurulumu ve Yapılandırılması&lt;/h2&gt;
&lt;p&gt;Rspec kurulumu yapmak için git üzerinde yeni bir dal açıyoruz:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout -b rspec-kurulum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yukarıdaki komut kısaca rspec-kurulum adında bir dal oluşturacak ve bu dala geçiş yapacaktır. Proje akışının düzenli olması açısından ve işler ters gittiğinde bazen geriye dönmemiz gerektiğinde sıkıntı yaşamamak için git repolarımızı düzenli tutmaya özen göstermeliyiz.&lt;/p&gt;

&lt;p&gt;Şimdi projemizin ana klasöründe bulunan Gemfile dosyasını açalım ve en altına:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rspec-rails&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bu kod rspec’in geliştirme ve test aşamalarında projemizde kurulu olacağını ancak canlı ortamda kullanılmayacağını belirtiyor.&lt;/p&gt;

&lt;p&gt;kodunu ekleyip kaydedin. Ardından konsolda:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutunu vererek rails projemize gerekli rspec kütüphanelerimizi eklemiş olacağız.&lt;/p&gt;

&lt;p&gt;şimdi konsolunuza aşağıdaki komutu girin:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails generate rspec:install -p&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;alacağınız ekran görüntüsü aşağıdaki gibi olacaktır:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails generate rspec:install -p
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
      create  spec/rails_helper.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;komutumuzun arkasından gelen -p parametresi İngilizce pretend kelimesinin kısaltmasıdır, yani dilimize ‘gibi davranmak’ olarak çevrilebilir. &lt;em&gt;rails generate&lt;/em&gt; ya da kısaltması &lt;em&gt;rails g&lt;/em&gt; komutlarının arkasına koyduğumuz -p ifadesi komutun &lt;strong&gt;gibi davranmasını&lt;/strong&gt; ve aslında çalışınca neler değişeceğini ekrana göstermesi için kullanılan çok kullanışlı bir parametredir.&lt;/p&gt;

&lt;p&gt;Oluşturulacak dosyaları tek tek incelediğimizde .rspec dosyası rspec komutu çalıştırıldığında arkasına otomatik gelecek parametrelerin listesinin bulunduğu bir basit bir yazı dosyası.&lt;/p&gt;

&lt;p&gt;spec klasörü testlerimizin ve alakalı dosyalarının tutulacağı dizin. Burada bilmemiz gereken Rspec jargonlarında testlerin spec olarak anılmaları. spec_helper.rb dosyası tüm testlerde ortak kullanılacak yardımcı metotların tutulacağı dosya ve rails_helper ise bizim daha çoğunlukla kullanacağımız dosya ve aslında spec_helper’ın rails için özelleşmiş versiyonu da denebilir. Bu dosyayı tüm rails testlerinin üst kısımlarına ekleyeceğiz.&lt;/p&gt;

&lt;p&gt;Artık rspec’in dosya yapısı hakkında genel bir kanıya sahip olduğumuza göre gerçek komutu çalıştırabiliriz.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rails generate rspec:install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Şimdi Rails uygulamalarını test edebilmek için bize gereken rspec silahlarına sahibiz.&lt;/p&gt;

&lt;p&gt;Son olarak yaptığımız değişiklikleri git repomuza yollamak için.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rspec kurulumu&amp;quot;&lt;/span&gt;
git checkout master
git merge rspec-kurulum
git branch -d rspec-kurulum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yazı serisinin giriş bölümü sona erdi. Devamı için &lt;a href=&quot;/blog/rails-ile-tdd--2-modellerin-test-edilmesi/&quot;&gt;buraya&lt;/a&gt; tıklayın.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Nov 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/rails-ile-tdd-test-gdml-programlama--1/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/rails-ile-tdd-test-gdml-programlama--1/</guid>
        
        <category>Ruby</category>
        
        <category>Ruby on Rails</category>
        
        <category>TDD</category>
        
        <category>Dersler</category>
        
        
      </item>
    
      <item>
        <title>Masaüstü Linux Dünyası</title>
        <description>&lt;p&gt;GNU/Linux hepimizin çok sevdiği, öve öve bitiremediği ama çoğunlukla sanal makinada
ya da dual bot ile kullanmayı layık gördüğümüz bir işletim sistemi. Ancak bugün burada Linux’un
sunucu bazında pazar payındaki tartışılmaz aslan payından, Android olarak ceplerde
edindiği yerinden, mikro ölçekli milyonlarca cihazla dünyayı ele geçirmesinden
bahsetmeyeceğim. Benim burada konuşacağım tek konu GNU/Linux dağıtımlarının masaüstü bilgisayarlarındaki durumu olacak.&lt;/p&gt;

&lt;p&gt;Linux ile ilk tanışmam 2000 li yılların başında, ilk bilgisayara sahip olduğum
zamanlarda, bir derginin yanında hediye verilen Mandrake Linux ile oldu. O zamanlardan aklımda kalan; sistemin sürekli çökmesi ve İngilizce
bilmediğim bir dönemde işletim sistemindeki bir çok kısımın tercüme edilmemiş olmasından kaynaklanan
sıkıntılar. Hafızamı daha da kurcaladığımda, o zamanda 56K internal faks modem ile internete
bağlandığımı ve bu modemler için yazılmış ücretsiz bir sürücü olmamasından dolayı internete
bağlanamamamdı. Sırf internetten paket yükleyebilmek için, bilgisayarımı Windows ile
 boot edip yüklemek istediğim paketi internetten yüklüyor, sonra yeniden Mandrake’den
boot edip windows sürücülerine erişerek söz konusu paketleri Linux’a yüklüyordum.
Bir süre sonra sıkılıp Linux’u sistemden tamamen uçurarak bir süre o zamanların efsanesi olan Windows XP’yi
kullanarak yoluma devam ettim.&lt;/p&gt;

&lt;p&gt;Bir süre sonra milli işletim sistemi Pardus duyuruldu. Pisi paket yöneticisi,
şık KDE ve Gnome masaüstleri, Çomar vs. İlgi çekici ve başarılıydı. Artık ADSL teknolojisi
evlere girmiş olduğundan internete bağlanmakta da sıkıntı çekmiyordu.Gel gör ki o fontlar,
o çözünürlük hala Windows ayarında değildi ama sonuçta bu bir milli yazılımdı. Hayalimde; o ayda bir
formatlamak zorunda olduğum Windows’tan kurtulmak olsa da, swf geliştirmek için
Macromedia Flash’a olan ihtiyaç ve Linux yazıcı sürücülerinin berbat durumda olması bir taraftan
sürekli Windows’u el altında tutmayı gerektiriyordu. E tabi bir de oyunlar meselesi
var. Millet Fifa, NFS ve CS oynarken benim basit puzzle oyunlarıyle yetinmem de
beklenmezdi(!) Yine de Pardus projesi -sıfırlanıncaya- dek kullanmaya devam ettim.&lt;/p&gt;

&lt;p&gt;XP den 8’e kadar abidik gubudik bütün Windows sürümlerini kullandım ancak gel gör ki
2013 te Macbook Pro Retina 15” alıp OS X ile tanışıncaya kadar aslında bir işletim sisteminin
nasıl olması gerektiği ile ilgili yeterli fikre sahip olmadığımı fark ettim. Görüntü
kalitesi ve font render özellikleri muhteşem. İçindeki donanım ile tam uyumlu ve
malzeme olarak da çok kaliteli. Burada sabaha kadar ağzım sulana sulana Mac ve OS X övebilirim ancak mesele şu ki gönlüm içinde ne olduğunu bilmediğim yazılımlardan ziyade her zaman özgür yazılımdan yana.&lt;/p&gt;

&lt;p&gt;Açık kaynak temelli web teknolojileri ile yazılım geliştiren birisi zaten sürekli
Linux sunucularla haşır neşir olmak durumunda olsa da Torvalds’ın lafı hep aklımda
‘I still want the desktop.’ yani ‘Hala masaüstünü istiyorum.’ Masaüstü için zaman
zaman popüler olması sebebiyle Ubuntu’yu ara sıra yükleyip inceliyordum ve kabul ediyorum ki
artık sıradan bir bilgisayar kullanıcısının bile rahatlıkla kullanabileceği noktalara geldi. Ancak
Canonical kendi saçmalıklarını o kadar çok sisteme bulaştırmış ki şahsen bana Linux
tadı vermiyor. Sisteme her büyük güncelleme gelişinde çöküyor ve bana ayar dosyalarını
kurcalattırıyor. Artı ve eksileriyle çok şey yazılabilir ama aradığım tat kesinlikle
Ubuntu değil.&lt;/p&gt;

&lt;p&gt;En son kullanmaya başladığım Linux dağıtımı ise Mint. Başta görüntü ve fontlar çamur gibi gelmesine
rağmen birkaç ayarla retina çözünürlüğüne uygun hale geldi ve şu an neredeyse OS X’i bile
aratmayacak durumda olduğunu düşünüyorum. Ubuntu’dan çatallanan projenin masaüstü yöneticisi
Cinnamon ise Gnome projesinden çatallanmış. Ubuntu’nun tüm iyi taraflarını üzerinde
barındırmasına rağmen Canonical saçmalıklarından da arındırılmış durumda.&lt;/p&gt;

&lt;p&gt;En büyük eksisi ise bence süresi geçmiş X Server ise hala arka planda çalışmaya devam ediyor olması. Bu konuda Wayland
projesi X Server’in yerine almaya henüz uzak gibi duruyor. Görüntü sunucusu teknolojisi yenilenmeli ve
ben bu gönderiyi yazarken sistem dondu ve yeniden başlatmam gerekti dolayısıyla görünen o ki
OS X’e bir süre daha devam etmem gerekiyor.&lt;/p&gt;

&lt;p&gt;Evet şu an masaüstü bilgisayarların çoğunluğu ele geçirilemedi ama yakın gelecekte
işler değişebileceğe benziyor. Şimdilik bu konudaki en güçlü adayım Linux Mint.&lt;/p&gt;

&lt;p&gt;Bir sonraki yazımda görüşmek üzere sağlıcakla kalın.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Nov 2014 00:00:00 +0200</pubDate>
        <link>http://turhancoskun.com/blog/masast-linux-dnyas/</link>
        <guid isPermaLink="true">http://turhancoskun.com/blog/masast-linux-dnyas/</guid>
        
        <category>Unix</category>
        
        <category>Genel</category>
        
        <category>Linux</category>
        
        
      </item>
    
  </channel>
</rss>
